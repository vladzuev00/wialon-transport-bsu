    В общем виде, вне зависимости от протокола и вида входящего пакета, обработка происходит следующим образом.
Пусть у нас есть некоторое n-е количество входящих пакетов какого-то протокола: ReqPackage-1, ReqPackage-2 и ReqPackage-N.
Каждому входящему пакету ReqPackage-k(где k - некоторое число от 1 до n) соотвествует пакет ответа ResPackage-k, который
должен быть послан трекеру в ответ после обработки этого пакета.

    Внутри каждого сервера сконфигурирован pipeline, в который приходят все входящие пакеты. Каждый pipeline состоит
из следующих компонентов:
    - ProtocolDecoder. Внутри себя содержит набор PackageDecoder-ов, каждый из которых ответственен за то, чтобы
декодировать набор байт в java-объект, который представляет собой какой-то определенный входящий пакет. Каждому типу
пакету ReqPackage-k(где k - некоторое число от 1 до n) соотвествует один ReqPackageKDecoder, который отвественен за
декодирование этих пакетов.
    - ProtocolHandler. Внутри себя содержит набор PackageHandler-ов, каждый из которых ответственен за обработку
входящего пакета и формирование ответа в виде java-объекта. Каждому пакету ReqPackage-k(где k - некоторое число от
1 до n) соотвествует один ReqPackageKHandler, который отвественен за обработку этих пакетов.
    - ProtocolEncoder. Внутри себя содержит набор PackageEncoder-ов, каждый из которых ответственен за кодирование
полученного ответа в набор байт и передачу полученного набора байт трекеру в качестве ответа. Каждому пакету ResPackage-k
(где k - некоторое число от 1 до n) соотвествует один ResPackageKEncoder, который ответственен за кодирование этих пакетов.
    - ReadTimeoutHandler. Отвественен за то, чтобы распознавать трекеры, которые подключились к нашему серверу и не выполняют
никакой полезной работы. Если такой трекер будет найден, соединение с ним будет разорвано.
    - ExceptionHandler. Отвественен за обработку ошибок при приеме входящих сообщений.

    Сначала от трекера поступает какой-то набор байт. Этот набор байт приходит в pipeline, внутри которого сначала
попадает в ProtocolDecoder. Внутри ProtocolDecoder-а выбирается соотвествующий PackageDecoder, который отвественен за
декодирование входящего пакета. Внутри выбранного PackageDecoder-а из полученного набора байт формируется java-объект
ReqPackage-k, который представляет собой входящий пакет.

    Полученный java-объект идет дальше по pipeline-у и попадает в ProtocolHandler. Внутри ProtocolHandler-а выбирается
соотвествующий PackageHandler, который отвественен за обработку входящего пакета. Внутри выбранного PackageHandler-а
выполняется соотвествующая обработка входящего пакета и формируется ответ ResPackageK в виде java-объекта.

    Полученный java-объект идет дальше по pipeline-у и попадает в ProtocolEncoder. Внутри ProtocolEncoder-а выбирается
соотвествующий PackageEncoder, который отвественен за кодирование полученного объекта ResPackageK в набор байт.
Выполняется кодирование и полученный набор байт отправляется трекеру в качестве ответа.